#include "workchain.fc";

() deploy( ;; deploy contract with state_init
    int bounce_flag,
    slice recipient,
    int value,
    cell body,
    cell state_init,
    int mode
) impure inline_ref {
    var msg = begin_cell()
        .store_msg_flags_and_address_none(bounce_flag)
        .store_slice(recipient)
        .store_coins(value)
        .store_statinit_ref_and_body_ref(state_init, body)
        .end_cell();
    send_raw_message(msg, mode);
}

() send_bounceable_msg(slice to, int value, cell body, int mode) impure inline_ref {
    var msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(to) ;; dest
        .store_coins(value)
        .store_only_body_ref(body);
    send_raw_message(msg.end_cell(), mode);
}

cell pack_jetton_wallet_data(int status, int balance, slice owner_address, slice jetton_master_address) inline {
    return begin_cell()
    .store_uint(status, 4)
    .store_coins(balance)
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .end_cell();
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return begin_cell()
    .store_uint(0, 2) ;; 0b00 - No split_depth; No special
    .store_maybe_ref(jetton_wallet_code)
    .store_maybe_ref(
        pack_jetton_wallet_data(
            0, ;; status
            0, ;; balance
            owner_address,
            jetton_master_address)
    )
    .store_uint(0, 1) ;; Empty libraries
    .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell()
    .store_uint(4, 3) ;; 0b100 = addr_std$10 tag; No anycast
    .store_int(MY_WORKCHAIN, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}