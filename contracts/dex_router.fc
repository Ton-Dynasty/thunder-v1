#include "imports/stdlib.fc";
#include "common/workchain.fc";
#include "common/opcodes.fc";
#include "dex_router/storages.fc";
#include "dex_router/utils.fc";
#include "dex_router/opcodes.fc";

() route_internal(slice ctx::sender, int ctx::value, int ctx::fwd_fee, slice ctx::body) impure inline {
    dex_router::load_data();
    ;; load op and query id
    (int op, int query_id) = ctx::body~load_op_and_query_id();
    if(op == op::transfer_notification) {

        int jetton_amount = ctx::body~load_coins();
        slice jetton_sender = ctx::body~load_msg_addr();
        slice forward_payload = ctx::body~load_ref().begin_parse();

        op = forward_payload~load_op(); ;; op MUST be the first 32 bits of the payload in this case

        if(op == op::create_pool) {
            int ton_amount = forward_payload~load_coins();
            slice master_address = forward_payload~load_msg_addr();
            return ();
        }
    }

    if (op == op::top_up) {
        return ();
    }

    throw(0xffffff);
}

() main(int ctx::value, cell in_msg_full, slice ctx::body) impure {
    slice s = in_msg_full.begin_parse();
    int flags = s~load_msg_flags();

    if (is_bounced(flags)) { ;; skip all bounced messages
        return ();
    }
    
    ;; get context
    (slice ctx::sender, int ctx::fwd_fee) = s~retrieve_ctx(MY_WORKCHAIN);

    ;; route function to handle internal message
    route_internal(ctx::sender, ctx::value, ctx::fwd_fee, ctx::body);
}

