#include "imports/stdlib.fc";
#include "common/workchain.fc";
#include "common/opcodes.fc";
#include "common/utils.fc";
#include "pool/opcodes.fc";
#include "dex_router/storages.fc";
#include "dex_router/opcodes.fc";
#include "dex_router/utils.fc";
#include "dex_router/errors.fc";
#include "dex_router/gas.fc";

;; ===== Internal =====
(slice, cell, cell) internal::deposit_asset(
    slice ctx::sender,
    slice other_asset_wallet,
    int send_ton,
    int query_id, 
    int asset0_amount, 
    int asset1_amount, 
    int min_lp_amount, 
    slice lp_recipient, 
    cell fulfill_payload, 
    cell reject_payload
) impure inline {
    cell deposit_asset_payload = pack_deposit_asset_data(
        query_id, 
        asset0_amount, 
        asset1_amount, 
        min_lp_amount, 
        lp_recipient, 
        fulfill_payload, 
        reject_payload
    );

    ;; Calculate recipient's wallet address
    cell state_init = calculate_pool_state_init(ctx::sender, other_asset_wallet);
    slice pool_address = calculate_address(state_init);


    deploy(BOUNCEABLE, pool_address, send_ton, deposit_asset_payload, state_init, SEND_MODE_REGULAR);

    return (pool_address, deposit_asset_payload, state_init);
}

;; ===== Handle =====
() handle::add_liquidity(
    int query_id,
    slice ctx::sender,  
    int ctx::value,
    int ctx::fwd_fee,
    int jetton_amount,
    slice jetton_sender,
    slice other_asset_wallet,
    int other_asset_amount,
    int min_lp_amount,
    slice recipient,
    cell fulfill_payload,
    cell reject_payload
) impure inline {
    int ton_amount = 0;
    if(equal_slices_bits(address_none(), other_asset_wallet)) {
        ton_amount = other_asset_amount;
    }

    (int total_fees, int gas_consumptoin) = cal_deploy_pool_fee(ctx::fwd_fee, 1);
    if(ctx::value < total_fees + ton_amount) {
        ;; When this happens, dex router will take gas_consumption / 2 from the jetton sender
        transfer_jetton(BOUNCEABLE, ctx::sender, jetton_sender, jetton_amount, ctx::value - gas_consumptoin / 2, query_id, FORWARD_FEE, reject_payload, SEND_MODE_REGULAR);
        return();
    }
    int send_ton = ctx::value - ton_amount - gas_consumptoin;
    
    if (is_address_none(recipient)) {
        recipient = jetton_sender;
    }

    (slice pool_address, cell deposit_asset_payload, cell state_init) = internal::deposit_asset(
        ctx::sender,
        other_asset_wallet,
        send_ton,
        query_id, 
        jetton_amount, 
        other_asset_amount, 
        min_lp_amount, 
        recipient,
        fulfill_payload,
        reject_payload
    );

    ;; Calculate recipient's wallet address
    ;; cell state_init = calculate_pool_state_init(jetton_sender, other_asset_wallet);
    ;; slice pool_address = calculate_address(state_init);
    ;; send_bounceable_msg(pool_address, send_ton, deposit_asset_payload, SEND_MODE_REGULAR);

    return ();
}

() handle::swap_jetton(
    int query_id,
    slice ctx::sender,  
    int ctx::value,
    int ctx::fwd_fee,
    int jetton_amount,
    slice jetton_sender,
    slice master_address,
    int asset_in,
    int min_amount_out,
    int deadline,
    slice recipient,
    cell next,
    cell extra_payload,
    cell fulfill_payload,
    cell reject_payload
) impure inline {
    throw_unless(error::not_enough_ton, ctx::value > ctx::fwd_fee);
    int send_ton = ctx::value - ctx::fwd_fee;

    cell swap_jetton_payload = pack_swap_internal(
        query_id,
        jetton_sender,
        asset_in,
        jetton_amount,
        min_amount_out,
        deadline,
        recipient,
        extra_payload,
        fulfill_payload,
        reject_payload
    );

    ;; Calculate recipient's wallet address
    cell state_init = calculate_pool_state_init(jetton_sender, master_address);
    slice pool_address = calculate_address(state_init);
    send_bounceable_msg(pool_address, send_ton, swap_jetton_payload, SEND_MODE_REGULAR);
    return ();
}

;; () handle::swap_ton(
;;     int query_id,
;;     slice ctx::sender,  
;;     int ctx::value,
;;     int ctx::fwd_fee,
;;     int ton_amount,
;;     int min_amount_out,
;;     int deadline,
;;     slice recipient,
;;     cell next,
;;     cell extra_payload,
;;     cell fulfill_payload,
;;     cell reject_payload
;; ) impure inline {
;;     dex_router::load_data();
;;     throw_unless(error::not_enough_ton, ctx::value > ctx::fwd_fee);
;;     int send_ton = ctx::value - ctx::fwd_fee;

;;     cell swap_ton_payload = pack_swap_ton_data(
;;         query_id,
;;         ton_amount,
;;         min_amount_out,
;;         deadline,
;;         recipient,
;;         next,
;;         extra_payload,
;;         fulfill_payload,
;;         reject_payload
;;     );

;;     cell state_init = calculate_pool_state_init(dex_router::owner_address);
;;     slice pool_address = calculate_address(state_init);

;;     send_bounceable_msg(pool_address, send_ton, swap_ton_payload, SEND_MODE_REGULAR);
;;     return ();
;; }

() handle::payout_from_pool(
    int query_id,
    slice ctx::sender,
    int ctx::value,
    int ctx::fwd_fee,
    slice sender,
    slice asset_address,
    int amount_out,
    slice recipient,
    cell payload
) impure inline {
    if (is_address_none(asset_address)){
        ~strdump("swap out ton");
        ;; TON transfer
        ~dump(recipient);
        ~dump(amount_out + ctx::value - GAS_CONSUMPTION);
        ;; transfer_ton(
        ;;     BOUNCEABLE, 
        ;;     recipient, 
        ;;     amount_out + ctx::value - GAS_CONSUMPTION,
        ;;     payload, 
        ;;     SEND_MODE_REGULAR
        ;; );
        ~strdump("swap out ton done");
        return ();
    }
    int send_ton = ctx::value - FORWARD_FEE - GAS_CONSUMPTION;
    int forward_ton = FORWARD_FEE;
    slice dex_router_jetton_wallet = calculate_jetton_wallet_address(
        calculate_jetton_wallet_state_init(
            my_address(), 
            asset_address, 
            dex_router::jetton_wallet_code
        )
    );
    transfer_jetton(
        BOUNCEABLE, 
        dex_router_jetton_wallet, 
        recipient, 
        amount_out, 
        send_ton, 
        query_id, 
        forward_ton, 
        payload, 
        SEND_MODE_REGULAR
    );
    return ();
}

() route_internal(slice ctx::sender, int ctx::value, int ctx::fwd_fee, slice ctx::body) impure inline {
    dex_router::load_data();
    ;; load op and query id
    (int op, int query_id) = ctx::body~load_op_and_query_id();
    if(op == op::transfer_notification) {

        int jetton_amount = ctx::body~load_coins();
        slice jetton_sender = ctx::body~load_msg_addr();
        slice forward_payload = ctx::body~load_ref().begin_parse();

        op = forward_payload~load_op(); ;; op MUST be the first 32 bits of the payload in this case

        if(op == op::add_liquidity) {
            int other_asset_amount = forward_payload~load_coins();
            slice other_asset_wallet = forward_payload~load_msg_addr();
            int min_lp_amount = forward_payload~load_coins();
            slice recipient = forward_payload~load_msg_addr();
            cell fulfill_payload = forward_payload~load_maybe_ref();
            cell reject_payload = forward_payload~load_maybe_ref();

            return handle::add_liquidity(
                query_id,
                ctx::sender,   ;; dex router wallet address
                ctx::value,
                ctx::fwd_fee,
                jetton_amount,
                jetton_sender,
                other_asset_wallet,
                other_asset_amount,
                min_lp_amount,
                recipient,
                fulfill_payload,
                reject_payload
            );
        }

        if(op == op::swap_jetton) {
            slice master_address = forward_payload~load_msg_addr();
            int asset_in = forward_payload~load_uint(1);
            int min_amount_out = forward_payload~load_coins();
            int deadline = forward_payload~load_uint(64);
            slice recipient = forward_payload~load_msg_addr();
            cell next = forward_payload~load_maybe_ref();
            cell extra_payload = forward_payload~load_maybe_ref();
            cell fulfill_payload = forward_payload~load_maybe_ref();
            cell reject_payload = forward_payload~load_maybe_ref();
            return handle::swap_jetton(
                query_id,
                ctx::sender,
                ctx::value,
                ctx::fwd_fee,
                jetton_amount,
                jetton_sender,
                master_address,
                asset_in,
                min_amount_out,
                deadline,
                recipient,
                next,
                extra_payload,
                fulfill_payload,
                reject_payload
            );
        }
    }

    if(op == op::swap_ton) {
        return ();
    }

    if(op == op::payout_from_pool) {
        slice sender = ctx::body~load_msg_addr();
        slice asset_address = ctx::body~load_msg_addr();
        int amount_out = ctx::body~load_coins();
        slice recipient = ctx::body~load_msg_addr();
        cell payload = ctx::body~load_maybe_ref();
        return handle::payout_from_pool(
            query_id,
            ctx::sender,
            ctx::value,
            ctx::fwd_fee,
            sender,
            asset_address,
            amount_out,
            recipient,
            payload
        );
    }

    if (op == op::top_up) {
        return ();
    }

    throw(0xffffff);
}

() main(int ctx::value, cell in_msg_full, slice ctx::body) impure {
    slice s = in_msg_full.begin_parse();
    int flags = s~load_msg_flags();

    if (is_bounced(flags)) { ;; skip all bounced messages
        return ();
    }
    
    ;; get context
    (slice ctx::sender, int ctx::fwd_fee) = s~retrieve_ctx(MY_WORKCHAIN);

    ;; route function to handle internal message
    route_internal(ctx::sender, ctx::value, ctx::fwd_fee, ctx::body);
}

;; ===== Getter =====
(slice) get_pool_address(slice asset_wallet_0, slice asset_wallet_1) method_id {
    dex_router::load_data();
    ;; Calculate recipient's wallet address
    cell state_init = calculate_pool_state_init(asset_wallet_0, asset_wallet_1);
    slice pool_address = calculate_address(state_init);
    return pool_address;
}