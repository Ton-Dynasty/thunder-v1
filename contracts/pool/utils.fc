
(slice, int) simulate::deposit(
    int asset0_amount,
    int asset1_amount,
    slice lp_receiver
) inline {
    ~strdump("simulate deposit");
    int product = asset0_amount * asset1_amount;
    ~strdump("product");
    ~dump(product);
    throw_unless(error::invalid_liquidity_amount, product > 0);

    int lp_amount = 0;

    if(pool::lp_total_supply == 0) {
        ;; first deposit: lp amount = sqrt(asset0_amount * asset1_amount)
        lp_amount = math::sqrt(product) / const::required_min_liquidity;
        lp_receiver = address_none(); ;; Lock the initial liquidity, so it will be impossible to fully drain the pool.
    }
    else {
        int to_mint0 = muldiv(asset0_amount, pool::lp_total_supply, pool::reserve0);
        int to_mint1 = muldiv(asset1_amount, pool::lp_total_supply, pool::reserve1);
        lp_amount = min(to_mint0, to_mint1);
    }
    pool::reserve0 += asset0_amount;
    pool::reserve1 += asset1_amount;
    pool::lp_total_supply += lp_amount;

    return (lp_receiver, lp_amount);
}

(int, int) simulate::get_amount_out(int asset_in_index, int amount_in) inline {
    int trade_fee = amount_in * pool::swap_fee / const::fee_precision;
    int amount_in_after_fee = amount_in - trade_fee;
    if (asset_in_index == 0) {
        int amount_out = pool::reserve1 - pool::reserve1 * pool::reserve0 / (pool::reserve0 + amount_in_after_fee);
        return (amount_out, trade_fee);
    } else {
        int amount_out = pool::reserve0 - pool::reserve0 * pool::reserve1 / (pool::reserve1 + amount_in_after_fee);
        return (amount_out, trade_fee);
    }
}

() deploy( ;; deploy contract with state_init
    int bounce_flag,
    slice receiver,
    int value,
    cell body,
    cell state_init,
    int mode
) impure inline_ref {
    var msg = begin_cell()
        .store_msg_flags_and_address_none(bounce_flag)
        .store_slice(receiver)
        .store_coins(value)
        .store_statinit_ref_and_body_ref(state_init, body)
        .end_cell();

    send_raw_message(msg, mode);
}

cell pack_jetton_lp_wallet_data(int balance, slice owner_address, slice jetton_master_address) inline {
    return begin_cell()
    .store_uint(0, 4)
    .store_coins(balance)
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
  .end_cell();
}

cell calculate_jetton_lp_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return begin_cell()
    .store_uint(0, 2)
    .store_maybe_ref(jetton_wallet_code)
    .store_maybe_ref(pack_jetton_lp_wallet_data(0, owner_address, jetton_master_address))
    .store_uint(0, 1)
  .end_cell();
}

slice calculate_jetton_lp_wallet_address(cell state_init) inline {
    return begin_cell().store_uint(4, 3)
    .store_int(MY_WORKCHAIN, 8)
    .store_uint(cell_hash(state_init), 256)
  .end_cell().begin_parse();
}

slice calculate_user_jetton_lp_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return calculate_jetton_lp_wallet_address(calculate_jetton_lp_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}

() mint_lp(int query_id, slice to, int amount, int send_ton, cell payload) impure inline {
    cell state_init = calculate_jetton_lp_wallet_state_init(to, my_address(), pool::lp_jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_lp_wallet_address(state_init);
    var body = begin_cell()
    .store_uint(op::internal_transfer, 32)
    .store_uint(query_id, 64)
    .store_coins(amount)
    .store_slice(my_address())
    .store_slice(to)
    .store_coins(payload.cell_null?() ? 0 : gas::forward_ton) 
    .store_maybe_ref(payload);

    deploy(BOUNCEABLE, to_wallet_address, send_ton, body.end_cell(), state_init, SEND_MODE_REGULAR);
}

cell pack_payout_from_pool(int query_id, slice sender, slice receipient, int asset_out, int amount_out, cell payload) inline {
    var data = begin_cell()
        .store_op(op::payout_from_pool)
        .store_query_id(query_id)
        .store_slice(receipient)
        .store_coins(asset_out)
        .store_coins(amount_out)
        .store_slice(receipient)
        .store_maybe_ref(payload)
        .end_cell();

    return data;
}

() send_bounceable_msg(slice to, int value, cell body, int mode) impure inline_ref {
    var msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(to) ;; dest
        .store_coins(value)
        .store_only_body_ref(body);
    send_raw_message(msg.end_cell(), mode);
}