
(slice, int) simulate::deposit(
    int asset0_amount,
    int asset1_amount,
    slice lp_recipient
) inline {
    int product = asset0_amount * asset1_amount;

    throw_unless(error::invalid_liquidity_amount, product > 0);

    int lp_amount = 0;

    if(pool::lp_total_supply == 0) {
        ;; first deposit: lp amount = sqrt(asset0_amount * asset1_amount)
        lp_amount = math::sqrt(product) / const::required_min_liquidity;
        lp_recipient = address_none(); ;; Lock the initial liquidity, so it will be impossible to fully drain the pool.
    }
    else {
        int to_mint0 = muldiv(asset0_amount, pool::lp_total_supply, pool::reserve0);
        int to_mint1 = muldiv(asset1_amount, pool::lp_total_supply, pool::reserve1);
        lp_amount = min(to_mint0, to_mint1);
    }
    pool::reserve0 += asset0_amount;
    pool::reserve1 += asset1_amount;
    pool::lp_total_supply += lp_amount;

    return (lp_recipient, lp_amount);
}

(int, int) simulate::get_amount_out(int asset_in_index, int amount_in) inline {
    int trade_fee = amount_in * pool::swap_fee / const::fee_precision;
    int amount_in_after_fee = amount_in - trade_fee;
    if (asset_in_index == 0) {
        int amount_out = pool::reserve1 - pool::reserve1 * pool::reserve0 / (pool::reserve0 + amount_in_after_fee);
        return (amount_out, trade_fee);
    } else {
        int amount_out = pool::reserve0 - pool::reserve0 * pool::reserve1 / (pool::reserve1 + amount_in_after_fee);
        return (amount_out, trade_fee);
    }
}

(int, int) simulate::withdraw(int lp_amount) inline {
    throw_unless(error::invalid_burn_amount, lp_amount <= pool::lp_total_supply & (lp_amount > 0));
    int asset0_amount = muldiv(lp_amount, pool::reserve0, pool::lp_total_supply);
    int asset1_amount = muldiv(lp_amount, pool::reserve1, pool::lp_total_supply);
    pool::reserve0 -= asset0_amount;
    pool::reserve1 -= asset1_amount;
    pool::lp_total_supply -= lp_amount;
    return (asset0_amount, asset1_amount);
}

() mint_lp(int query_id, slice to, int amount, int send_ton, cell payload) impure inline {
    cell state_init = calculate_jetton_wallet_state_init(to, my_address(), pool::lp_jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var body = begin_cell()
    .store_uint(op::internal_transfer, 32)
    .store_uint(query_id, 64)
    .store_coins(amount)
    .store_slice(my_address())
    .store_slice(to)
    .store_coins(payload.cell_null?() ? 0 : gas::forward_ton) 
    .store_maybe_ref(payload);

    deploy(BOUNCEABLE, to_wallet_address, send_ton, body.end_cell(), state_init, SEND_MODE_REGULAR);
}

cell pack_payout_from_pool(int query_id, slice sender, slice recipient, int asset_out, int amount_out, cell payload) inline {
    var data = begin_cell()
        .store_op(op::payout_from_pool)
        .store_query_id(query_id)
        .store_slice(recipient)
        .store_coins(asset_out)
        .store_coins(amount_out)
        .store_slice(recipient)
        .store_maybe_ref(payload)
        .end_cell();

    return data;
}

