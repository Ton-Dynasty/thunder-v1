#include "imports/stdlib.fc";
#include "common/errors.fc";
#include "common/utils.fc";
#include "common/workchain.fc";
#include "common/opcodes.fc";
#include "jetton_master_bond/constants.fc";
#include "jetton_master_bond/opcodes.fc";
#include "jetton_master_bond/storages.fc";
#include "jetton_master_bond/errors.fc";
#include "jetton_master_bond/utils.fc";
#include "jetton_master_bond/logs.fc";
#include "jetton_master_bond/gas.fc";

() handle::claim_admin_fee(
    int query_id,
    int send_ton
) impure inline_ref {
    send_ton += master::fee;
    cell msg = pack_excess(query_id, master::admin_address, send_ton);
    send_raw_message(msg, SEND_MODE_REGULAR);

    master::fee = 0;
    master::save_data();
}

() handle::mint_token(
    int query_id,
    slice ctx::sender, 
    int ctx::value, 
    int ctx::fwd_fee,
    int ton_amount,
    int min_token_out,
    slice destination,
    slice response_address,
    cell custom_payload,
    int forward_ton_amount,
    cell forward_payload
) impure inline_ref {
    ;; Check that user send enough TON to mint tokens and pay for gas fees
    (int total_fees, int gas_consumptoin) = cal_buy_fee(ctx::fwd_fee);
    throw_unless(error::not_enough_ton, ctx::value > ton_amount + total_fees + forward_ton_amount);
    
    ;; Calculate token_out based on ton_amount
    (int token_out, int true_amount_in, int ton_has_to_pay) = simulate::estimate_buy_result(ton_amount);
    ;; If the amount out doesn't meet the min_token_out, then throw error. It will send ton back to user by bounce
    throw_unless(error::not_meet_min_amount, token_out >= min_token_out); 

    ;; Calculate remaining ton and update storage
    int ton_back_to_user = ctx::value - gas_consumptoin - ton_has_to_pay;
    master::ton_reserves += true_amount_in;
    master::fee += ton_has_to_pay - true_amount_in; ;; fee is the difference between ton_has_to_pay and true_amount_in
    master::jetton_reserves -= token_out;

    ;; If ton_reserves reach to the moon threshold, then send to admin
    if(master::ton_reserves == master::ton_the_moon) {
        master::on_moon = TRUE;
    }

    ;; Mint tokens to user
    mint_jetton(
        BOUNCEABLE,
        query_id,
        ton_back_to_user,
        token_out,
        destination,
        response_address,
        forward_ton_amount,
        forward_payload
    );

    emit::mint(
        ctx::sender,
        destination,
        ton_amount,
        token_out,
        master::total_supply,
        master::ton_reserves,
        master::jetton_reserves,
        master::on_moon
    );

    master::save_data();
    return ();
}

() handle::burn_token(
    int query_id,
    slice ctx::sender,
    int ctx::value,
    int ctx::fwd_fee,
    int burn_amount,
    slice from_address,
    slice response_address
) impure inline_ref {

    ;; Burn Amount should larger than 0
    throw_unless(error::burn_amount_zero, burn_amount > 0);

    ;; Calculate the gas fee
    (int total_fees, int gas_consumptoin) = cal_sell_fee(ctx::fwd_fee);
    throw_unless(error::not_enough_ton, ctx::value > total_fees);
    int send_ton = ctx::value - gas_consumptoin;

    ;; Calculate sender's wallet address
    cell state_init = calculate_jetton_wallet_state_init(from_address, my_address(), master::jetton_wallet_code);
    slice true_sender = calculate_jetton_wallet_address(state_init);
    ;; Only master's meme jetton wallet can send burn notifycation to jetton mastser
    throw_unless(error::not_valid_wallet, equal_slices_bits(true_sender, ctx::sender));

    ;; Calculate amount out based on burn jetton_amount
    (int amount_out, int delta_ton, int fee) = simulate::estimate_sell_result(burn_amount);
    
    ;; Upload storage
    master::ton_reserves -= delta_ton;
    master::jetton_reserves += burn_amount;
    master::fee += fee;

    ;; If user didn't provide response address to receive ton, then send to from_address
    slice recipient = from_address;
    if (~ is_address_none(response_address)) {
        recipient = response_address;
    }

    ;; Transfer tons (from selling meme tokens) to user
    cell msg = pack_excess(query_id, recipient, amount_out + send_ton);
    send_raw_message(msg, SEND_MODE_REGULAR);

    emit::burn(
        from_address,
        recipient,
        burn_amount,
        amount_out,
        master::total_supply,
        master::ton_reserves,
        master::jetton_reserves,
        master::on_moon
    );

    master::save_data();
    return ();
}

() handle::to_the_moon(
    int ctx::value,
    int query_id,
    cell ton_body,
    slice vault_address,
    cell jetton_body
) impure inline_ref {
    int remain_ton = ctx::value - MINT_GAS * 2 - DEDUST_FOWARD_GAS - DEDUST_SEND_GAS - DEDUST_ADD_TON_GAS;
    ;; Calculate jetton reserves send to dex router and thunder fi admin fee
    int send_ton_liquidity = master::ton_reserves * (const::precision - const::commission) / const::precision; ;; Only send 90% of ton_reserves to liquidity pool
    int ton_fee_for_admin = remain_ton + master::ton_reserves - send_ton_liquidity + master::fee; ;; build_pool_fee is for building pool and farm, thunder fi will pay for it.

    ;; Calculate jetton reserves send to dex router
    int price_for_now = const::price_precision * (master::ton_reserves + master::v_ton) / master::jetton_reserves;
    int send_jetton_liquidity = const::price_precision * send_ton_liquidity / price_for_now;
    int jetton_fee_for_admin = master::jetton_reserves - send_jetton_liquidity;

    ;; Send fee to admin by minting jetton
    mint_jetton(
        BOUNCEABLE,
        query_id,
        ton_fee_for_admin, 
        jetton_fee_for_admin,
        master::admin_address,
        master::admin_address,
        0, 
        begin_cell().store_uint(0, 1).end_cell()
    );

    ;; Update storage
    master::ton_reserves = 0;
    master::jetton_reserves = 0;
    master::fee = 0;

    ;; Provide ton liquidity to dedust
    int send_ton = send_ton_liquidity + DEDUST_ADD_TON_GAS; ;; dedust ask for 0.15 TON
    var msg = begin_cell()
        .store_msg_flags_and_address_none(NON_BOUNCEABLE)
        .store_slice(TON_VAULT_ADDR)
        .store_coins(send_ton)
        .store_only_body_ref(ton_body);
    send_raw_message(msg.end_cell(), SEND_MODE_REGULAR);

    ;; Mint Jetton to Master Bond, so that it can provide jetton liquidity to dedust
    mint_jetton(
        BOUNCEABLE,
        query_id,
        MINT_GAS, ;; 0.03 TON
        send_jetton_liquidity,
        my_address(),
        master::admin_address,
        0, 
        begin_cell().store_uint(0, 1).end_cell()
    );

    ;; Provide jetton liquidity to dedust
    ;; Calculate master bond wallet address
    slice to_wallet_address = calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(my_address(), my_address(), master::jetton_wallet_code));
    transfer_jetton(
        query_id,
        send_jetton_liquidity,
        vault_address,
        DEDUST_FOWARD_GAS,
        jetton_body,
        to_wallet_address,
        DEDUST_FOWARD_GAS + DEDUST_SEND_GAS
    ) ;
    return ();

}

() route_internal(slice ctx::sender, int ctx::value, int ctx::fwd_fee, slice ctx::body) impure inline {
    ;; load op and query id
    (int op, int query_id) = ctx::body~load_op_and_query_id();

    ;; Load data from storage
    master::load_data();

    if op == op::thunder_mint {
        ;; load data in mint msg
        int ton_amount = ctx::body~load_coins(); ;; user paid this amount of ton to buy meme token
        int min_token_out = ctx::body~load_coins(); ;; minimum amount of meme token user want to buy
        slice destination = ctx::body~load_msg_addr(); ;; who will receive the meme token
        slice response_address = ctx::body~load_msg_addr(); ;; who will receive the remaining ton
        cell custom_payload = ctx::body~load_maybe_ref();
        int forward_ton_amount = ctx::body~load_coins();
        cell forward_payload = ctx::body~load_ref();
        ctx::body.end_parse();

        ;; Throw error if token already listed. it will send back ton to user by bounce
        throw_unless(error::token_already_listed, master::on_moon == FALSE);

        ;; Token amount should be larger than 0
        throw_unless(error::invalid_amount, ton_amount >= 0);

        handle::mint_token(
            query_id, 
            ctx::sender, 
            ctx::value, 
            ctx::fwd_fee, 
            ton_amount,
            min_token_out,
            destination,
            response_address,
            custom_payload,
            forward_ton_amount,
            forward_payload
        );
        return ();
    }

    if op == op::burn_notification {
        int jetton_amount = ctx::body~load_coins(); ;; meme jetton amount user want to sell
        slice from_address = ctx::body~load_msg_addr(); ;; who sold the meme jetton
        slice response_address = ctx::body~load_msg_addr(); ;; who will receive The TON obtained from selling meme tokens
        ctx::body.end_parse();

        ;; if master::on_moon is TRUE, then turn to normal burn notification logic
        if master::on_moon {
            master::total_supply -= jetton_amount;
            if ~ is_address_none(response_address) {
                ;; send TON with excess message to response_address
                cell msg = pack_excess(query_id, response_address, 0);
                send_raw_message(msg, SEND_MODE_IGNORE_ERRORS + SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
            }
            master::save_data();
            return ();
        }
        
        ;; if master::on_moon is FALSE, then use VLMM formula to calculate the amount of TON user will receive
        handle::burn_token(query_id, ctx::sender, ctx::value, ctx::fwd_fee, jetton_amount, from_address, response_address);

        return ();
    }

    if op == op::provide_wallet_address {
        ;; see provide_wallet_address TL-B layout in jetton.tlb
        slice owner_address = ctx::body~load_msg_addr();
        int include_address? = ctx::body~load_bool();
        ctx::body.end_parse();

        cell included_address = include_address?
        ? begin_cell().store_slice(owner_address).end_cell()
        : null();

        ;; build MessageRelaxed, see TL-B layout in stdlib.fc#L733
        var msg = begin_cell()
        .store_msg_flags_and_address_none(NON_BOUNCEABLE)
        .store_slice(ctx::sender)
        .store_coins(0)
        .store_prefix_only_body()
        .store_op(op::take_wallet_address)
        .store_query_id(query_id);

        if (is_same_workchain(owner_address)) {
            msg = msg.store_slice(calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, my_address(), master::jetton_wallet_code)));
        } else {
            msg = msg.store_address_none();
        }

        cell msg_cell = msg.store_maybe_ref(included_address).end_cell();

        send_raw_message(msg_cell, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
        return ();
    }

    if op == op::change_content_cell {
        throw_unless(error::not_admin, equal_slices_bits(ctx::sender, master::admin_address));
        master::jetton_content = ctx::body~load_ref();
        ctx::body.end_parse();
        master::save_data();
        return ();
    }

    if op == op::upgrade {
        ;; only admin can upgrade the contract (admin should be thunder fi wallet address)
        throw_unless(error::not_admin, equal_slices_bits(ctx::sender, master::admin_address));
        (cell new_code, cell new_data) = (ctx::body~load_ref(), ctx::body~load_maybe_ref());
        ctx::body.end_parse();
        set_code(new_code);
        if (~ cell_null?(new_data)) {
            set_data(new_data);
        }
        return ();
    }

    if op == op::claim_admin_fee {
        throw_unless(error::not_admin, equal_slices_bits(ctx::sender, master::admin_address));
        
        (int total_fees, int gas_consumptoin) = cal_claim_fee(ctx::fwd_fee);
        throw_unless(error::not_enough_ton, ctx::value >= total_fees);
        handle::claim_admin_fee(query_id ,ctx::value - gas_consumptoin);
        return ();
    }

    if op == op::revoke {
        throw_unless(error::not_admin, equal_slices_bits(ctx::sender, master::admin_address));
        throw_unless(error::not_on_moon, master::on_moon == TRUE);
        ;; Claim admin fee before revoking admin address
        (int total_fees, int gas_consumptoin) = cal_revoke_fee(ctx::fwd_fee);
        throw_unless(error::not_enough_ton, ctx::value >= total_fees);
        handle::claim_admin_fee(query_id ,ctx::value - gas_consumptoin);
        ;; revoke admin address
        master::admin_address = address_none();
        master::save_data();
        return ();
    }

    if op == op::to_the_moon {
        ;; Only admin can trigger this function
        throw_unless(error::not_admin, equal_slices_bits(ctx::sender, master::admin_address));

        ;; Only after ton_the_moon is true, can trigger this function
        throw_unless(error::not_on_moon, master::on_moon == TRUE);

        throw_unless(error::not_enough_ton, ctx::value >= ONE_TON);

        cell ton_body = ctx::body~load_ref();
        cell jetton_body = ctx::body~load_ref();
        slice vault_address = ctx::body~load_msg_addr();

        handle::to_the_moon(
            ctx::value - BUILD_POOL_GAS,
            query_id,
            ton_body,
            vault_address,
            jetton_body
        );

        master::save_data();
        return ();
    }

    ;; We use premint 0 amount to deploy the contract
    ;; if op == op::top_up {
    ;;     ;; Send the remaining ton back
    ;;     int gas_comsumption = cal_deploy_fee(ctx::fwd_fee);
    ;;     throw_unless(error::not_enough_ton, ctx::value > gas_comsumption + ctx::fwd_fee);
    ;;     cell msg = pack_excess(query_id, ctx::sender, ctx::value - gas_comsumption);
    ;;     send_raw_message(msg, SEND_MODE_REGULAR);
    ;;     return ();
    ;; }

    throw(error::invalid_op);
}

() main(int ctx::value, cell in_msg_full, slice ctx::body) impure {
    slice s = in_msg_full.begin_parse();
    int flags = s~load_msg_flags();

    if (is_bounced(flags)) { ;; skip all bounced messages
        return ();
    }
    
    ;; get context
    (slice ctx::sender, int ctx::fwd_fee) = s~retrieve_ctx(MY_WORKCHAIN);

    ;; route function to handle internal message
    route_internal(ctx::sender, ctx::value, ctx::fwd_fee, ctx::body);
}

;; public getters

slice get_wallet_address(slice owner_address) method_id {
    master::load_data();
    return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, my_address(), master::jetton_wallet_code));
}

(int, int, int, int, int, slice, int, int, int) get_master_data() method_id {
    master::load_data();
    return (master::ton_reserves, master::jetton_reserves, master::fee, master::total_supply, master::on_moon, master::admin_address, master::v_ton, master::ton_the_moon, master::fee_rate);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    master::load_data();
    int total_supply = master::total_supply;
    slice admin_address = master::admin_address;
    cell jetton_wallet_code = master::jetton_wallet_code;
    int mintable = TRUE;
    return (total_supply, mintable, admin_address, master::jetton_content, jetton_wallet_code);
}

(int, int, int, int) get_estimate_buy_result(int ton_amount) method_id {
    master::load_data();
    (int token_out, _, _) = simulate::estimate_buy_result(ton_amount);
    return (token_out, master::ton_reserves, master::jetton_reserves, master::total_supply);
}

(int, int, int, int) get_estimate_sell_result(int jetton_amount) method_id {
    master::load_data();

    (int amount_out, _, _) = simulate::estimate_sell_result(jetton_amount);
    return (amount_out, master::ton_reserves, master::jetton_reserves, master::total_supply);
}