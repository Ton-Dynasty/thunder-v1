global int master::total_supply;
global slice master::admin_address;
global int master::ton_reserves; ;; the amount of ton stored in bonding curve
global int master::jetton_reserves; ;; the amount of jetton remain in contract
global int master::fee; ;; accumulated trading fee for admin to claim
global int master::on_moon; ;; is listing?
global slice master::dex_router; ;; listing target address
global cell master::jetton_wallet_code;
global cell master::jetton_content;

() master::load_data() impure inline_ref {
    slice ds = get_data().begin_parse();
    master::total_supply = ds~load_coins();
    master::admin_address = ds~load_msg_addr();
    master::ton_reserves = ds~load_coins();
    master::jetton_reserves = ds~load_coins();
    master::fee = ds~load_coins();


    ;; load basic info
    slice basic_info = ds~load_ref().begin_parse();
    master::on_moon = basic_info~load_uint(2);
    master::dex_router = basic_info~load_msg_addr();
    master::jetton_wallet_code = basic_info~load_ref();
    master::jetton_content = basic_info~load_ref();
}

() master::save_data() impure inline_ref {
    ;; pack basic info
    cell basic_info = begin_cell()
        .store_uint(master::on_moon, 2)
        .store_slice(master::dex_router)
        .store_ref(master::jetton_wallet_code)
        .store_ref(master::jetton_content)
    .end_cell();

    ;; set data
    set_data(
        begin_cell()
            .store_coins(master::total_supply)
            .store_slice(master::admin_address)
            .store_coins(master::ton_reserves)
            .store_coins(master::jetton_reserves)
            .store_coins(master::fee)
            .store_ref(basic_info)
        .end_cell()
    );
}